{"version":3,"sources":["src/cli.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,UAAU,QAAQ,WAAR;;AACV,KAAK,QAAQ,IAAR;;AACL,OAAO,QAAQ,MAAR;;AACP,eAAe,QAAQ,qBAAR;;AAGT;mBAEJ,WACE;IAAA,OACE;MAAA,MAAM,wCAAN;KADF;IAEA,MACE;MAAA,OAAO,kBAAP;MACA,SAAS,CAAE,GAAF,CADT;MAEA,MAAM,eAFN;MAGA,SAAS,CACP,CAAE,gBAAF,EAAoB,wBAApB,CADO,EAEP,CAAE,iBAAF,EAAqB,oBAArB,CAFO,EAGP,CAAE,kBAAF,EAAsB,oBAAtB,CAHO,EAIP,CAAE,wBAAF,EAA4B,yBAA5B,CAJO,EAKP,CAAE,qBAAF,EAAyB,YAAzB,CALO,EAMP,CAAE,yBAAF,EAA6B,wBAA7B,CANO,EAOP,CAAE,oBAAF,EAAwB,yCAAxB,CAPO,CAHT;KAHF;IAgBA,SACE;MAAA,OAAO,sBAAP;MACA,MAAM,8BADN;MAEA,SAAS,CAAE,KAAF,CAFT;KAjBF;IAoBA,WACE;MAAA,OAAO,uBAAP;MACA,MAAM,oBADN;MAEA,SAAS,CAAE,GAAF,CAFT;MAGA,SAAS,CACP,CAAE,qBAAF,EAAyB,YAAzB,CADO,EAEP,CAAE,yBAAF,EAA6B,wBAA7B,CAFO,EAGP,CAAE,oBAAF,EAAwB,yCAAxB,CAHO,EAIP,CAAE,aAAF,EAAiB,+BAAjB,CAJO,EAKP,CAAE,oBAAF,EAAwB,gBAAxB,CALO,CAHT;KArBF;IA+BA,UACE;MAAA,OAAO,wBAAP;MACA,MAAM,+BADN;MAEA,SAAS,CAAE,KAAF,CAFT;KAhCF;IAmCA,MACE;MAAA,OAAO,uDAAP;MACA,MAAM,eADN;MAEA,SAAS,CAAE,GAAF,CAFT;KApCF;IAuCA,OACE;MAAA,OAAO,uBAAP;MACA,SAAS,CAAE,GAAF,CADT;MAEA,MAAM,gBAFN;KAxCF;IA2CA,MACE;MAAA,OAAO,MAAP;MACA,MAAM,MADN;KA5CF;IA8CA,WACE;MAAA,OAAO,yBAAP;MACA,SAAS,CAAE,IAAF,CADT;MAEA,MAAM,kCAFN;KA/CF;IAkDA,SACE;MAAA,OAAO,SAAP;MACA,MAAM,iBADN;MAEA,SAAS,CAAE,GAAF,CAFT;KAnDF;IAsDA,SACE;MAAA,OAAO,qBAAP;MACA,MAAM,eADN;MAEA,SAAS,CAAE,GAAF,CAFT;MAGA,SAAS,CACP,CAAE,qBAAF,EAAyB,YAAzB,CADO,CAHT;KAvDF;IA6DA,IACE;MAAA,OAAO,IAAP;MACA,MAAM,gBADN;KA9DF;IAgEA,SACE;MAAA,MAAM,oBAAN;MACA,SAAS,CAAE,IAAF,CADT;KAjEF;IAmEA,SACE;MAAA,OAAO,qBAAP;MACA,SAAS,CAAE,IAAF,CADT;MAEA,MAAM,mBAFN;MAGA,SAAS,CACP,CAAE,qBAAF,EAAyB,YAAzB,CADO,EAEP,CAAE,yBAAF,EAA6B,wBAA7B,CAFO,EAGP,CAAE,oBAAF,EAAwB,yCAAxB,CAHO,CAHT;KApEF;;;mBA6EF,SAAQ;;mBACR,aAAY;;mBACZ,gBAAe;;mBAEf,aACE;IAAA,SACE;MAAA,YACE;QAAA,KAAK,YAAL;QACA,MAAM,eADN;OADF;KADF;IAIA,WACE;MAAA,SAAS,mGAAT;MACA,MAAM,SADN;KALF;IAOA,SACE;MAAA,SAAS,iDAAT;MACA,MAAM,UADN;KARF;IAUA,MACE;MAAA,SAAS,kFAAT;MACA,MAAM,IADN;KAXF;IAaA,SACE;MAAA,SAAS,kGAAT;MACA,MAAM,UADN;KAdF;;;EAiBW;IACX,IAAC,QAAD,GAAW,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,OAAL,CAAa,SAAb,EAAwB,IAAxB,EAA8B,cAA9B,CAAhB,CAAX,CAA0E,CAAC;IACtF,IAAC,YAAD,CAAa;aAAA,SAAC,GAAD;eACX,KAAC,IAAD,CAAK,GAAL;MADW;IAAA,QAAb;EAFW;;mBAKb,UAAS,SAAC,GAAD,EAAM,QAAN;AACP;IAAA,SAAS;AACT;;MACE,IAAG,IAAC,cAAc,IAAlB;QACE,MAAM,IAAC,cAAc,KADvB;OAAA;QAGE,MAAM,QAAQ,EAAR;QACN,IAAC,cAAc,IAAf,GAAqB,IAJvB;;MAKA,MAAM,CAAC,IAAP,CAAY,GAAZ;AANF;WAOA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,MAArB;EATO;;mBAWT,aAAY;WACV,IAAC,QAAD,CAAS,CAAE,QAAF,CAAT,EAAuB;aAAA,SAAC,GAAD;AACrB,eAAU,KAAC,QAAF,GAAU,WAAV,GAAqB,GAAG,CAAC,OAAzB,GAAiC;MADrB;IAAA,QAAvB;EADU;;mBAIZ,MAAK,SAAC,GAAD;IACH,IAAC,MAAD,CAAO,sBAAoB,GAA3B;WAEA,IAAC,QAAD,CAAS,CAAE,QAAF,CAAT,EAAuB;aAAA,SAAC,GAAD;AACrB;QAAA,YACE;UAAA,QAAQ,KAAC,QAAO,CAAC,MAAT,IAAmB,KAAC,WAAU,CAAC,MAAvC;UACA,4DAAiC,CAAE,qBADnC;UAEA,YAAY,IAFZ;;QAIF,KAAC,WAAU,CAAC,OAAZ,GAAsB,aAAa,GAAG,CAAC,OAAjB,EAA0B,KAAC,WAAU,CAAC,OAAtC;eAEtB,GAAG,CAAC,GAAJ,CAAQ,SAAR,EAAmB,SAAC,GAAD;UAAC,KAAC,OAAD;iBAClB,KAAE,UAAO,GAAP,CAAF,CAAc,SAAC,GAAD,EAAM,MAAN;YACZ,IAAG,GAAH;cACE,KAAC,UAAD,CAAW,GAAX,EADF;;YAEA,IAAG,CAAC,MAAJ;cACE,KAAC,UAAD,CAAW,oBAAX,EADF;aAAA,MAEK,IAAG,OAAO,MAAP,KAAkB,QAArB;cACH,OAAO,CAAC,GAAR,CAAY,MAAZ,EADG;aAAA;cAGH,IAAG,KAAC,QAAO,CAAC,IAAZ;gBACE,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,IAAtB,CAAZ,EADF;eAAA,MAEK,IAAG,MAAM,CAAC,IAAV;gBACH,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,IAAnB,EADG;eALF;;mBAOL,KAAC,MAAD,CAAO,OAAP;UAZY,CAAd;QADiB,CAAnB;MARqB;IAAA,QAAvB;EAHG;;mBA0BL,YAAW,SAAC,GAAD;IACT,OAAO,CAAC,GAAR,CAAY,YAAU,GAAtB;WACA,OAAO,CAAC,IAAR,CAAa,EAAb;EAFS;;mBAIX,cAAa,SAAC,QAAD;AACX;IAAA,IAAC,QAAD,GAAW,OACT,CAAC,KADQ,CACF,qBADE,CAET,CAAC,OAFQ,CAEA,IAAC,WAAD,EAFA,CAGT,CAAC,MAHQ,CAGD,aAHC,EAGc,sCAHd,CAIT,CAAC,MAJQ,CAID,YAJC,EAIa,gBAJb,CAKT,CAAC,MALQ,CAKD,oBALC,EAKqB,oBALrB;IAOX,UAAU;IAEV,MAAM;IACN,aAAa;AACb;AAAA;;MACE,QAAQ;MACR,IAAG,OAAO,CAAC,KAAX;QACE,QAAQ,OAAO,CAAC,MADlB;;MAEA,KAAK,IAAC,QAAO,CAAC,OAAT,CAAiB,KAAjB,CACH,CAAC,WADE,CACU,OAAO,CAAC,IADlB;MAGL,IAAG,OAAO,CAAC,OAAX;AACE;AAAA;;UACE,OAAQ,OAAR,GAAiB;AADnB;QAEA,OAAO,CAAC,OAAO,CAAC,GAAhB,CAAoB,SAAC,GAAD;iBAAS,KAAK,EAAE,CAAC,KAAH,CAAS,GAAT;QAAd,CAApB,EAHF;;MAKA,IAAG,OAAO,CAAC,OAAX;QACE,OAAO,CAAC,OAAO,CAAC,GAAhB,CAAoB,SAAC,GAAD;iBAAS,KAAK,EAAE,CAAC,MAAH,CAAU,GAAI,GAAd,EAAkB,GAAI,GAAtB;QAAd,CAApB,EADF;;MAGA,KAAK,EAAE,CAAC,MAAH,CAAU;AACb;QAAA,UAAU,SAAU,OAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB,CAAC,MAAvB,GAA8B,CAA9B;QACpB,MAAM,OAAO,CAAC;QACd,aAAa;QACb,UAAU;AACV;;UACE,IAAG,OAAO,GAAP,KAAe,QAAlB;YACE,OAAO,CAAC,IAAR,CAAa,GAAb,EADF;;AADF;eAIA,UAAU,CAAC,UAAX,GAAwB;MATX,CAAV;AAfP;IA2BA,OAAO,OAAO,CAAC,IAAI,CAAC,KAAb;IACP,IAAG,OAAQ,KAAK,GAAL,CAAX;MACE,IAAK,GAAL,GAAU,OAAQ,KAAK,GAAL,EADpB;;IAGA,IAAC,QAAO,CAAC,KAAT,CAAe,IAAf;IACA,IAAC,WAAD,GAAc;IAEd,IAAG,IAAC,QAAO,CAAC,KAAZ;MACE,OAAO,CAAC,GAAG,CAAC,KAAZ,GAAoB;MACpB,IAAC,MAAD,GAAS,QAAQ,OAAR,EAAiB,UAAjB;MACT,IAAC,MAAD,CAAO,qBAAP,EAHF;KAAA;MAKE,IAAC,MAAD,GAAS;AAAG,eAAO;MAAV,EALX;;IAOA,IAAG,QAAO,IAAV;MACE,IAAC,QAAO,CAAC,UAAT;aACA,OAAO,CAAC,IAAR,CAAa,CAAb,EAFF;KAAA,MAGK,IAAG,CAAC,IAAE,UAAO,GAAP,CAAN;aACH,IAAC,UAAD,CAAW,yBAAuB,GAAlC,EADG;KAAA,MAEA,IAAG,QAAO,OAAV;aACH,SAAS,GAAT,EADG;KAAA;aAGH,IAAC,eAAD,CAAgB;eAAA;iBACd,SAAS,GAAT;QADc;MAAA,QAAhB,EAHG;;EA1DM;;mBAgEb,YAAW,SAAC,MAAD,EAAS,QAAT;AACT;IAAA,SAAS,QAAQ,QAAR;IACT,MAAM,CAAC,OAAP,GAAiB;IACjB,MAAM,CAAC,SAAP,GAAmB;IACnB,MAAM,CAAC,KAAP;WAEA,MAAM,CAAC,GAAP,CAAW,MAAX,EAAmB,SAAC,GAAD,EAAM,MAAN;MACjB,MAAM,CAAC,IAAP;aACA,SAAS,GAAT,EAAc,MAAd;IAFiB,CAAnB;EANS;;mBAUX,WAAU,SAAC,QAAD;AACR;IAAA,OAAO,IAAC,WAAU,CAAC;IACnB,QACE;MAAA,SAAS,IAAC,iBAAD,CAAkB,IAAK,GAAvB,CAAT;MACA,WAAW,IAAC,iBAAD,CAAkB,IAAK,GAAvB,CADX;MAEA,MAAM,IAAK,GAFX;MAGA,YAAY,IAAK,GAHjB;;IAKF,IAAG,CAAC,KAAK,CAAC,SAAV;AACE,aAAO,SAAS,oBAAkB,IAAK,GAAhC,EADT;;IAEA,IAAQ,WAAO,KAAK,CAAC,IAAb,CAAJ,IAA0B,CAA9B;AACE,aAAO,SAAS,eAAa,KAAK,CAAC,IAA5B,EADT;;IAEA,IAAQ,WAAO,KAAK,CAAC,UAAb,CAAJ,IAAgC,CAApC;AACE,aAAO,SAAS,qBAAmB,KAAK,CAAC,UAAlC,EADT;;WAGA,IAAC,IAAG,CAAC,IAAL,CAAU,KAAV,EAAiB;aAAA,SAAC,GAAD,EAAM,MAAN;AACf;QAAA,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QAEA,YAAY,KAAC,UAAD,CAAW,MAAM,CAAC,OAAO,CAAC,UAA1B,KAAyC,MAAM,CAAC,OAAO,CAAC;QACpE,UAAc,SAAS,WAAO,MAAM,CAAC,WAAd,CAAT,CAAoC,CAAC,QAArC;QAEd,OAAO,oCACL,kBAAe,MAAM,CAAC,EAAtB,GAAyB,IAAzB,CADK,GAEL,cAAW,MAAM,CAAC,IAAlB,GAAuB,IAAvB,CAFK,GAGL,qBAAkB,MAAM,CAAC,UAAzB,GAAoC,IAApC,CAHK,GAIL,iBAAc,MAAM,CAAC,OAAO,CAAC,WAA7B,GAAyC,IAAzC,GAA6C,SAA7C,GAAuD,KAAvD,CAJK,GAKL,mBAAgB,MAAM,CAAC,SAAvB,GAAiC,IAAjC,CALK,GAML,oBAAiB,MAAM,CAAC,eAAe,CAAC,MAAxC,GAA+C,IAA/C,CANK,GAOL,oBAAiB,MAAM,CAAC,QAAxB,GAAiC,IAAjC,CAPK,GAQL,uBAAoB,MAAM,CAAC,KAAK,CAAC,MAAjC,GAAwC,IAAxC,CARK,GASL,cAAW,OAAX;eAEA,SAAS,IAAT,EAAe;UAAE,MAAM,IAAR;UAAc,MAAM,MAApB;SAAf;MAjBa;IAAA,QAAjB;EAfQ;;mBAkCV,YAAW,SAAC,QAAD;AACT;IAAA,OAAO,IAAC,WAAU,CAAC;IACnB,aAAa,IAAK;IAClB,IAAG,CAAC,UAAJ;AAAoB,aAAO,SAAS,gBAAT,EAA3B;;WAEA,IAAC,IAAG,CAAC,KAAL,CAAW,UAAX,EAAuB;aAAA,SAAC,GAAD,EAAM,MAAN;AACrB;QAAA,IAAG,GAAH;AAAY,iBAAO,SAAS,GAAT,EAAnB;;QAEA,YAAY,KAAC,UAAD,CAAW,MAAM,CAAC,OAAO,CAAC,UAA1B,KAAyC,MAAM,CAAC,OAAO,CAAC;QACpE,UAAc,SAAS,WAAO,MAAM,CAAC,WAAd,CAAT,CAAoC,CAAC,QAArC;QAEd,OAAO,uBACL,kBAAe,MAAM,CAAC,EAAtB,GAAyB,IAAzB,CADK,GAEL,cAAW,MAAM,CAAC,IAAlB,GAAuB,IAAvB,CAFK,GAGL,qBAAkB,MAAM,CAAC,UAAzB,GAAoC,IAApC,CAHK,GAIL,iBAAc,MAAM,CAAC,OAAO,CAAC,WAA7B,GAAyC,IAAzC,GAA6C,SAA7C,GAAuD,KAAvD,CAJK,GAKL,mBAAgB,MAAM,CAAC,SAAvB,GAAiC,IAAjC,CALK,GAML,oBAAiB,MAAM,CAAC,eAAe,CAAC,MAAxC,GAA+C,IAA/C,CANK,GAOL,oBAAiB,MAAM,CAAC,QAAxB,GAAiC,IAAjC,CAPK,GAQL,qBAAkB,MAAM,CAAC,KAAK,CAAC,MAA/B,GAAsC,IAAtC,CARK,GASL,gBAAa,MAAM,CAAC,aAAa,CAAC,MAAlC,GAAyC,GAAzC,GAA4C,MAAM,CAAC,aAAa,CAAC,QAAjE,GAA0E,IAA1E,CATK,GAUL,cAAW,OAAX;eAEF,SAAS,IAAT,EAAe;UAAE,MAAM,IAAR;UAAc,MAAM,MAApB;SAAf;MAlBqB;IAAA,QAAvB;EALS;;mBAyBX,SAAQ,SAAC,QAAD;WACN,IAAC,IAAG,CAAC,EAAL,CAAQ;aAAA,SAAC,GAAD,EAAM,IAAN;QACN,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;eACA,SAAS,IAAT,EAAe;UAAE,MAAM,IAAI,CAAC,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAR;UAAuC,MAAM,IAA7C;SAAf;MAFM;IAAA,QAAR;EADM;;mBAKR,WAAU,SAAC,QAAD;IACR,OAAO,CAAC,UAAR;WACA,SAAS,IAAT,EAAe,IAAf;EAFQ;;mBAIV,YAAW,SAAC,QAAD;AACT;IAAA,OAAO,CAAC,GAAR,CAAY,oCAAZ;IACA,OAAO,CAAC,GAAR,CAAY,qCAAZ;IAEA,SACE;MAAA,YACE;QAAA,OAAO;UAAE,aAAa,OAAf;SAAP;QACA,UAAU;UAAE,aAAa,UAAf;UAA2B,QAAQ,IAAnC;SADV;OADF;;WAIF,IAAC,UAAD,CAAW,MAAX,EAAmB;aAAA,SAAC,GAAD,EAAM,OAAN;QACjB,KAAC,MAAD,CAAO,2BAAyB,OAAO,CAAC,KAAjC,GAAuC,MAA9C;eACA,KAAC,IAAG,CAAC,KAAL,CAAW,OAAX,EAAoB,SAAC,GAAD,EAAM,IAAN;UAClB,IAAG,OAAO,CAAC,IAAI,CAAC,YAAhB;AACE,mBAAO,KAAC,UAAD,CAAW,aAAX,EADT;;UAGA,KAAC,MAAD,CAAO,uBAAP;iBACA,KAAC,eAAD,CAAgB,SAAhB,EAA2B;YAAE,cAAc,IAAI,CAAC,YAArB;WAA3B,EAAgE;mBAC9D,SAAS,IAAT,EAAe;cAAE,MAAM,6BAAR;cAAuC,MAAM,IAA7C;aAAf;UAD8D,CAAhE;QALkB,CAApB;MAFiB;IAAA,QAAnB;EATS;;mBAmBX,cAAa,SAAC,QAAD;AAEX;IAAA,UACE;MAAA,IACE;QAAA,MAAM,IAAN;QACA,KAAK,IADL;OADF;MAGA,UACE;QAAA,MAAM,UAAN;QACA,QAAQ,SAAC,CAAD;AAAO,iBAAO,CAAC,CAAC,EAAE,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB;QAAd,CADR;OAJF;MAMA,UACE;QAAA,MAAM,UAAN;QACA,KAAK,kBADL;OAPF;MASA,SACE;QAAA,MAAM,SAAN;QACA,KAAK,qBADL;OAVF;MAYA,YACE;QAAA,MAAM,YAAN;QACA,KAAK,oBADL;OAbF;MAeA,eACE;QAAA,MAAM,YAAN;QACA,QAAQ;iBAAA,SAAC,CAAD;AAAO,mBAAO,KAAC,qBAAD,CAAsB,CAAC,CAAC,OAAO,CAAC,UAAhC;UAAd;QAAA,QADR;OAhBF;MAkBA,MACE;QAAA,MAAM,MAAN;QACA,KAAK,WADL;OAnBF;MAqBA,QACE;QAAA,MAAM,QAAN;QACA,KAAK,MADL;OAtBF;MAwBA,UACE;QAAA,MAAM,KAAN;QACA,KAAK,UADL;OAzBF;MA2BA,OACE;QAAA,MAAM,aAAN;QACA,KAAK,cADL;QAEA,OAAO,OAFP;OA5BF;MA+BA,QACE;QAAA,MAAM,QAAN;QACA,KAAK,wBADL;QAEA,OAAO,OAFP;OAhCF;MAmCA,QACE;QAAA,MAAM,QAAN;QACA,OAAO,OADP;QAEA,UAAU,SAAC,CAAD;iBAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAlB,CAA0B,OAA1B,EAAkC,EAAlC;QAAP,CAFV;QAGA,QAAQ;iBAAA,SAAC,CAAD;AACN,mBAAO;UADD;QAAA,QAHR;OApCF;MA0CA,SACE;QAAA,MAAM,SAAN;QACA,KAAK,aADL;OA3CF;MA6CA,KACE;QAAA,MAAM,KAAN;QACA,UAAU,SAAC,CAAD;iBAAO,CAAC,CAAC,GAAG,CAAC;QAAb,CADV;QAEA,QAAQ,SAAC,CAAD;AAAO,iBAAO,QAAQ,QAAR,EAAkB,CAAC,CAAC,WAApB,CAAgC,CAAC,OAAjC,CAAyC,IAAzC,CAA8C,CAAC,QAA/C;QAAd,CAFR;OA9CF;MAiDA,QACE;QAAA,MAAM,QAAN;QACA,OAAO,OADP;QAEA,QAAQ,SAAC,CAAD;AAAO;AAAA,uDAAuB,CAAE,gBAAjB,IAA2B;QAA1C,CAFR;OAlDF;MAqDA,YACE;QAAA,MAAM,aAAN;QACA,KAAK,WADL;OAtDF;;IAyDF,QAAQ,IAAC,YAAD,CAAa,OAAb,EAAsB,SAAtB,EAAiC,SAAjC;IAER,IAAG,IAAC,WAAU,CAAC,WAAf;MACE,OAAO,KAAK,CAAC,WAAN;AACP,aAAO,SAAS,IAAT,EAAe;QAAE,MAAM,IAAI,CAAC,KAAK,CAAC,QAAX,EAAR;QAA+B,MAAM,IAAI,CAAC,OAA1C;OAAf,EAFT;;IAIA,IAAG,OAAO,IAAC,QAAO,CAAC,IAAK,GAArB,KAA4B,QAA/B;MACE,KAAK,CAAC,SAAN,CAAgB,IAAC,QAAO,CAAC,IAAK,GAA9B,EADF;;IAGA,KAAK,CAAC,SAAN,CAAgB,IAAC,WAAU,CAAC,OAAZ,IAAuB,IAAC,WAAU,CAAC,OAAO,CAAC,OAA3D;IACA,KAAK,CAAC,OAAN,CAAc,IAAC,WAAU,CAAC,IAAZ,IAAoB,IAAC,WAAU,CAAC,OAAO,CAAC,IAAtD;IAEA,aAAa;aAAA,SAAC,KAAD,EAAQ,IAAR;QACX,KAAK,CAAC,OAAN,GAAgB,KAAC,cAAD,CAAe,SAAf;AAChB,eAAO,KAAK,CAAC,MAAN,CAAa,IAAb;MAFI;IAAA;WAIb,IAAC,IAAG,CAAC,MAAL,CAAY;aAAA,SAAC,GAAD,EAAM,CAAN;AACV;QAAA,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QACA,OAAO,WAAW,KAAX,EAAkB,CAAlB;eACP,SAAS,IAAT,EAAe;UAAE,MAAM,IAAR;UAAc,MAAM,CAApB;SAAf;MAHU;IAAA,QAAZ;EA5EW;;mBAiFb,gBAAe,SAAC,QAAD;AAEb;IAAA,UACE;MAAA,IACE;QAAA,MAAM,IAAN;QACA,KAAK,IADL;OADF;MAGA,UACE;QAAA,MAAM,UAAN;QACA,QAAQ,SAAC,CAAD;AAAO,iBAAO,CAAC,CAAC,EAAE,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB;QAAd,CADR;OAJF;MAMA,UACE;QAAA,MAAM,UAAN;QACA,KAAK,kBADL;OAPF;MASA,SACE;QAAA,MAAM,SAAN;QACA,KAAK,qBADL;OAVF;MAYA,YACE;QAAA,MAAM,YAAN;QACA,KAAK,oBADL;OAbF;MAeA,eACE;QAAA,MAAM,YAAN;QACA,QAAQ;iBAAA,SAAC,CAAD;AAAO,mBAAO,KAAC,qBAAD,CAAsB,CAAC,CAAC,OAAO,CAAC,UAAhC;UAAd;QAAA,QADR;OAhBF;MAkBA,UACE;QAAA,MAAM,KAAN;QACA,KAAK,UADL;OAnBF;MAqBA,MACE;QAAA,MAAM,MAAN;QACA,KAAK,MADL;OAtBF;MAwBA,aACE;QAAA,MAAM,aAAN;QACA,KAAK,mBADL;QAEA,OAAO,OAFP;OAzBF;MA4BA,OACE;QAAA,MAAM,OAAN;QACA,KAAK,qBADL;QAEA,OAAO,OAFP;OA7BF;MAgCA,QACE;QAAA,MAAM,QAAN;QACA,OAAO,OADP;QAEA,QAAQ,SAAC,CAAD;AAAO;AAAA,uDAAuB,CAAE,gBAAjB,IAA2B;QAA1C,CAFR;OAjCF;MAoCA,QACE;QAAA,MAAM,QAAN;QACA,KAAK,uBADL;QAEA,OAAO,OAFP;OArCF;MAwCA,QACE;QAAA,MAAM,QAAN;QACA,KAAK,cADL;OAzCF;MA2CA,KACE;QAAA,MAAM,KAAN;QACA,UAAU,SAAC,CAAD;iBAAO,CAAC,CAAC,GAAG,CAAC;QAAb,CADV;QAEA,QAAQ,SAAC,CAAD;AACN,iBAAO,QAAQ,QAAR,EAAkB,CAAC,CAAC,YAApB,CAAiC,CAAC,OAAlC,CAA0C,IAA1C,CAA+C,CAAC,QAAhD;QADD,CAFR;OA5CF;MAgDA,QACE;QAAA,MAAM,QAAN;QACA,OAAO,OADP;QAEA,UAAU,SAAC,CAAD;iBAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAlB,CAA0B,OAA1B,EAAkC,EAAlC;QAAP,CAFV;QAGA,QAAQ;iBAAA,SAAC,CAAD;AACN,mBAAO,KAAC,SAAD,CAAU,CAAC,CAAC,YAAY,CAAC,MAAzB,EAAiC,CAAC,CAAC,UAAU,CAAC,MAA9C,EAAsD,CAAC,CAAC,QAAxD,EAAkE,CAAC,CAAC,IAApE;UADD;QAAA,QAHR;OAjDF;;IAuDF,QAAQ,IAAC,YAAD,CAAa,OAAb,EAAsB,WAAtB,EAAmC,SAAnC;IAER,IAAG,IAAC,WAAU,CAAC,WAAf;MACE,OAAO,KAAK,CAAC,WAAN;AACP,aAAO,SAAS,IAAT,EAAe;QAAE,MAAM,IAAI,CAAC,KAAK,CAAC,QAAX,EAAR;QAA+B,MAAM,IAAI,CAAC,OAA1C;OAAf,EAFT;;IAIA,IAAG,OAAO,IAAC,QAAO,CAAC,IAAK,GAArB,KAA4B,QAA/B;MACE,KAAK,CAAC,SAAN,CAAgB,IAAC,QAAO,CAAC,IAAK,GAA9B,EADF;;IAGA,KAAK,CAAC,SAAN,CAAgB,IAAC,WAAU,CAAC,OAAZ,IAAuB,IAAC,WAAU,CAAC,SAAS,CAAC,OAA7D;IACA,KAAK,CAAC,OAAN,CAAc,IAAC,WAAU,CAAC,IAAZ,IAAoB,IAAC,WAAU,CAAC,SAAS,CAAC,IAAxD;IAEA,aAAa;aAAA,SAAC,KAAD,EAAQ,IAAR;QACX,KAAK,CAAC,OAAN,GAAgB,KAAC,cAAD,CAAe,WAAf;AAChB,eAAO,KAAK,CAAC,MAAN,CAAa,IAAb;MAFI;IAAA;IAIb,IAAG,IAAC,WAAU,CAAC,KAAf;MACE,WAAW,IAAC,WAAU,CAAC;MACvB,IAAG,CAAC,QAAJ;QACE,WAAW,GADb;;MAGA,OAAO,QAAS,cAAT,CAAyB,CAAC;MACjC,IAAI,CAAC,UAAL,CAAgB;QAAE,aAAa,IAAf;OAAhB;MAGA,aAAa;eAAA;iBACX,KAAC,IAAG,CAAC,SAAL,CAAe,SAAC,GAAD,EAAM,CAAN;YACb,IAAG,GAAH;AAAY,qBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;YACA,IAAI,CAAC,KAAL;YACA,KAAK,WAAW,KAAX,EAAkB,CAAC,CAAC,SAApB,CAAL;mBACA,KAAK,qBAAkB,CAAE,IAAI,IAAN,CAAvB;UAJa,CAAf;QADW;MAAA;MAOb;aACA,YAAY,UAAZ,EAAwB,WAAW,IAAnC,EAjBF;KAAA;aAoBE,IAAC,IAAG,CAAC,SAAL,CAAe;eAAA,SAAC,GAAD,EAAM,CAAN;AACb;UAAA,IAAG,GAAH;AAAY,mBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;UACA,OAAO,WAAW,KAAX,EAAkB,CAAC,CAAC,SAApB;iBACP,SAAS,IAAT,EAAe;YAAE,MAAM,IAAR;YAAc,MAAM,CAAC,CAAC,SAAtB;WAAf;QAHa;MAAA,QAAf,EApBF;;EA1Ea;;mBAmGf,YAAW,SAAC,SAAD,EAAY,OAAZ;AACT;;MADqB,UAAQ;;IAC7B,IAAG,IAAC,WAAU,CAAC,OAAQ,WAAvB;MACE,MAAM,MAAI,IAAC,WAAU,CAAC,OAAQ;MAC9B,IAAG,CAAC,OAAJ;AACE,eAAO,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAe,IADxB;;AAEA,aAAO,IAJT;;AAKA,WAAO;EANE;;mBAQX,mBAAkB,SAAC,GAAD;AAChB;IAAA,IAAG,0CAAH;AACE;AAAA;;AACE;;;AAAA;;UACE,IAAG,MAAK,GAAR;YAAiB,MAAM,GAAvB;;AACA;AAFF;AADF,OADF;;IAMA,IAAG,QAAa,MAAb,YAAqB,KAAxB;AAAqC,aAAO,MAA5C;;AACA,WAAO;EARS;;mBAUlB,uBAAsB,SAAC,EAAD;AACpB;IAAA,SAAS,IAAC,IAAG,CAAC,mBAAL,CAAyB,EAAzB;IACT,IAAG,CAAC,MAAJ;AAAgB,aAAO,GAAvB;;AACA,WAAO,MAAI;EAHS;;mBAKtB,mBAAkB,SAAC,EAAD;AAChB;IAAA,SAAS,IAAC,IAAG,CAAC,mBAAL,CAAyB,EAAzB,EAA6B,IAAC,WAAU,CAAC,OAAzC;AACT,WAAO,UAAU;EAFD;;mBAIlB,eAAc,SAAC,QAAD;AACZ;IAAA,aAAa,IAAC,WAAU,CAAC,UAAW;IAEpC,IAAC,MAAD,CAAO,uBAAqB,UAA5B;WACA,IAAC,IAAG,CAAC,QAAL,CAAc,UAAd,EAA0B;aAAA,SAAC,GAAD,EAAM,GAAN;eACxB,SAAS,GAAT,EAAc;UAAE,MAAM,IAAI,CAAC,SAAL,CAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAR;UAAsC,MAAM,GAA5C;SAAd;MADwB;IAAA,QAA1B;EAJY;;mBAOd,WAAU,SAAC,QAAD;WACR,IAAC,IAAG,CAAC,IAAL,CAAU;aAAA,SAAC,GAAD,EAAM,IAAN;eACR,SAAS,IAAT,EAAe;UAAE,MAAM,IAAI,CAAC,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAR;UAAuC,MAAM,IAA7C;SAAf;MADQ;IAAA,QAAV;EADQ;;mBAIV,cAAa,SAAC,QAAD;AACX;IAAA,YAAY,IAAC,iBAAD,CAAkB,IAAC,WAAU,CAAC,UAAW,GAAzC;IACZ,IAAC,MAAD,CAAO,sBAAoB,SAA3B;IAEA,SACE;MAAA,YACE;QAAA,MAAM,IAAN;OADF;MAEA,aACE;QAAA,MAAM,MAAN;OAHF;MAIA,UACE;QAAA,MAAM,UAAN;OALF;MAMA,UACE;QAAA,MAAM,UAAN;OAPF;MAQA,aACE;QAAA,MAAM,gBAAN;OATF;MAUA,aACE;QAAA,MAAM,aAAN;OAXF;;IAaF,QAAQ,IAAC,kBAAD,CAAmB,MAAnB,EAA2B,SAA3B,EAAsC,KAAtC;WAER,IAAC,IAAG,CAAC,OAAL,CAAa,SAAb,EAAwB;aAAA,SAAC,GAAD,EAAM,OAAN;AACtB;QAAA,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QACA,IAAG,CAAC,OAAJ;AAAiB,iBAAO,KAAC,UAAD,CAAW,wBAAsB,SAAjC,EAAxB;;QAEA,SAAS,KAAK,CAAC,iBAAN,CAAwB,OAAxB,EAAiC,MAAjC;eACT,SAAS,IAAT,EAAe;UAAE,MAAM,KAAK,CAAC,MAAN,CAAa,MAAb,CAAR;UAA8B,MAAM,OAApC;SAAf;MALsB;IAAA,QAAxB;EApBW;;mBA2Bb,cAAa,SAAC,QAAD;AACX;IAAA,SACE;MAAA,IACE;QAAA,MAAM,IAAN;OADF;MAEA,UACE;QAAA,MAAM,UAAN;OAHF;MAIA,WACE;QAAA,MAAM,YAAN;OALF;MAMA,aACE;QAAA,MAAM,SAAN;OAPF;MAQA,OACE;QAAA,MAAM,OAAN;OATF;MAUA,cACE;QAAA,MAAM,eAAN;OAXF;MAYA,aACE;QAAA,MAAM,cAAN;OAbF;MAcA,OACE;QAAA,MAAM,OAAN;OAfF;;IAiBF,QAAQ,IAAC,kBAAD,CAAmB,MAAnB,EAA2B,cAAY,IAAC,WAAU,CAAC,OAAO,CAAC,QAAhC,GAAyC,GAApE,EAAwE,KAAxE;WAER,IAAC,IAAG,CAAC,OAAL,CAAa;aAAA,SAAC,GAAD,EAAM,CAAN;AACX;QAAA,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QAEA,SAAS,KAAK,CAAC,iBAAN,CAAwB,CAAxB,EAA2B,MAA3B;eACT,SAAS,IAAT,EAAe;UAAE,MAAM,KAAK,CAAC,MAAN,CAAa,MAAb,CAAR;UAA8B,MAAM,CAApC;SAAf;MAJW;IAAA,QAAb;EArBW;;mBA2Bb,WAAU,SAAC,QAAD;AAER;IAAA,UACE;MAAA,IACE;QAAA,KAAK,YAAL;QACA,MAAM,IADN;OADF;MAGA,MACE;QAAA,MAAM,MAAN;QACA,KAAK,aADL;OAJF;MAMA,cACE;QAAA,MAAM,OAAN;QACA,KAAK,aADL;OAPF;MASA,UACE;QAAA,MAAM,UAAN;QACA,KAAK,UADL;OAVF;MAYA,UACE;QAAA,MAAM,UAAN;QACA,KAAK,UADL;OAbF;MAeA,QACE;QAAA,MAAM,QAAN;QACA,KAAK,qBADL;OAhBF;MAkBA,OACE;QAAA,MAAM,OAAN;QACA,KAAK,qBADL;OAnBF;MAqBA,QACE;QAAA,MAAM,QAAN;QACA,OAAO,OADP;QAEA,UAAU,SAAC,CAAD;iBAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAlB,CAA0B,OAA1B,EAAkC,EAAlC;QAAP,CAFV;QAGA,QAAQ;iBAAA,SAAC,CAAD;AACN,mBAAO,KAAC,SAAD,CAAU,CAAC,CAAC,YAAY,CAAC,MAAzB,EAAiC,CAAC,CAAC,YAAY,CAAC,MAAhD,EAAwD,CAAxD;UADD;QAAA,QAHR;OAtBF;MA2BA,eACE;QAAA,MAAM,YAAN;QACA,QAAQ;iBAAA,SAAC,CAAD;AAAO,mBAAO,KAAC,qBAAD,CAAsB,CAAC,CAAC,UAAxB;UAAd;QAAA,QADR;OA5BF;MA8BA,QACE;QAAA,MAAM,QAAN;QACA,QAAQ;iBAAA,SAAC,CAAD;AAAO,mBAAO,KAAC,UAAD,CAAW,CAAC,CAAC,UAAb;UAAd;QAAA,QADR;OA/BF;MAiCA,SACE;QAAA,MAAM,SAAN;QACA,QAAQ;iBAAA,SAAC,CAAD;AAAO,mBAAO,KAAC,UAAD,CAAW,CAAC,CAAC,UAAb,EAAyB,IAAzB;UAAd;QAAA,QADR;OAlCF;;IAqCF,QAAQ,IAAC,YAAD,CAAa,OAAb,EAAsB,IAAtB,EAA4B,MAA5B;IAER,IAAG,IAAC,WAAU,CAAC,WAAf;MACE,OAAO,KAAK,CAAC,WAAN;AACP,aAAO,SAAS,IAAT,EAAe;QAAE,MAAM,IAAI,CAAC,KAAK,CAAC,QAAX,EAAR;QAA+B,MAAM,IAAI,CAAC,OAA1C;OAAf,EAFT;;WAIA,IAAC,IAAG,CAAC,QAAL,CAAc;aAAA,SAAC,GAAD,EAAM,CAAN;QACZ,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QAEA,IAAG,OAAO,KAAC,QAAO,CAAC,IAAK,GAArB,KAA4B,QAA/B;UACE,KAAK,CAAC,SAAN,CAAgB,KAAC,QAAO,CAAC,IAAK,GAA9B,EADF;;QAGA,KAAK,CAAC,QAAN,GAAiB,SAAC,IAAD;AACf;UAAA,SAAS;UACT,IAAG,KAAC,WAAU,CAAC,QAAf;YACE,SAAS,CAAI,IAAI,CAAC,QAAR,GAAsB,IAAtB,GAAgC,KAAjC,EADX;;UAEA,IAAG,UAAW,KAAC,WAAU,CAAC,MAA1B;YACE,SAAU,IAAI,CAAC,mBAAL,KAA4B,KAAC,WAAU,CAAC,OADpD;WAAA,MAEK,IAAG,UAAW,KAAC,WAAU,CAAC,QAA1B;YACH,SAAU,IAAI,CAAC,mBAAL,KAA4B,OADnC;;AAEL,iBAAO;QARQ;QAUjB,KAAK,CAAC,OAAN,GAAgB,KAAC,cAAD,CAAe,UAAf;QAChB,KAAK,CAAC,SAAN,CAAgB,KAAC,WAAU,CAAC,OAAZ,IAAuB,KAAC,WAAU,CAAC,IAAI,CAAC,OAAxD;QACA,KAAK,CAAC,OAAN,CAAc,KAAC,WAAU,CAAC,IAAZ,IAAoB,KAAC,WAAU,CAAC,IAAI,CAAC,IAAnD;eAEA,SAAS,IAAT,EAAe;UAAE,MAAM,KAAK,CAAC,MAAN,CAAa,CAAb,CAAR;UAAyB,MAAM,CAA/B;SAAf;MApBY;IAAA,QAAd;EA9CQ;;mBAoEV,cAAa,SAAC,QAAD;AAEX;IAAA,UACE;MAAA,IACE;QAAA,KAAK,IAAL;QACA,MAAM,IADN;OADF;MAGA,UACE;QAAA,MAAM,IAAN;QACA,QAAQ,SAAC,CAAD;AAAO,iBAAO,CAAC,CAAC,EAAE,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB;QAAd,CADR;OAJF;MAMA,UACE;QAAA,KAAK,UAAL;QACA,MAAM,UADN;OAPF;MASA,OACE;QAAA,KAAK,OAAL;QACA,MAAM,OADN;OAVF;MAYA,SACE;QAAA,KAAK,aAAL;QACA,MAAM,SADN;OAbF;MAeA,MACE;QAAA,KAAK,aAAL;QACA,MAAM,cADN;OAhBF;MAkBA,OACE;QAAA,MAAM,cAAN;QACA,QAAQ,SAAC,CAAD;AACN,iBAAO,QAAQ,QAAR,EAAkB,CAAC,CAAC,WAApB,CAAgC,CAAC,OAAjC,CAAyC,IAAzC,CAA8C,CAAC,QAA/C;QADD,CADR;OAnBF;MAsBA,YACE;QAAA,MAAM,qBAAN;QACA,KAAK,aADL;OAvBF;;IA0BF,QAAQ,IAAC,YAAD,CAAa,OAAb,EAAsB,IAAtB,EAA4B,UAA5B;IAER,IAAG,IAAC,WAAU,CAAC,WAAf;MACE,OAAO,KAAK,CAAC,WAAN;AACP,aAAO,SAAS,IAAT,EAAe;QAAE,MAAM,IAAI,CAAC,KAAK,CAAC,QAAX,EAAR;QAA+B,MAAM,IAAI,CAAC,OAA1C;OAAf,EAFT;;WAIA,IAAC,IAAG,CAAC,OAAL,CAAa;aAAA,SAAC,GAAD,EAAM,CAAN;QACX,IAAG,GAAH;AAAY,iBAAO,KAAC,UAAD,CAAW,GAAX,EAAnB;;QAEA,IAAG,OAAO,KAAC,QAAO,CAAC,IAAK,GAArB,KAA4B,QAA/B;UACE,KAAK,CAAC,SAAN,CAAgB,KAAC,QAAO,CAAC,IAAK,GAA9B,EADF;;QAGA,KAAK,CAAC,OAAN,GAAgB,KAAC,cAAD,CAAe,SAAf;QAChB,KAAK,CAAC,SAAN,CAAgB,KAAC,WAAU,CAAC,OAAZ,IAAuB,KAAC,WAAU,CAAC,OAAO,CAAC,OAA3D;QACA,KAAK,CAAC,OAAN,CAAc,KAAC,WAAU,CAAC,IAAZ,IAAoB,KAAC,WAAU,CAAC,OAAO,CAAC,IAAtD;eAEA,SAAS,IAAT,EAAe;UAAE,MAAM,KAAK,CAAC,MAAN,CAAa,CAAb,CAAR;UAAyB,MAAM,CAA/B;SAAf;MAVW;IAAA,QAAb;EAnCW;;mBA+Cb,gBAAe,SAAC,SAAD;;mBAEf,cAAa,SAAC,OAAD,EAAU,IAAV,EAAgB,aAAhB;AACX;IAAA,QAAQ,QAAQ,SAAR;IACR,QAAY,UAAM,OAAN,EAAe,aAAf,EAA8B,IAA9B;AACZ,WAAO;EAHI;;mBAKb,oBAAmB,SAAC,MAAD,EAAS,IAAT,EAAe,aAAf;AACjB;IAAA,UACE;MAAA,OACE;QAAA,KAAK,KAAL;QACA,MAAM,KADN;QAEA,OAAO,OAFP;OADF;MAIA,OACE;QAAA,KAAK,OAAL;QACA,MAAM,OADN;OALF;;IAQF,QAAQ,IAAC,YAAD,CAAa,OAAb,EAAsB,IAAtB,EAA4B,aAA5B;IACR,KAAK,CAAC,UAAN,GAAmB;IACnB,KAAK,CAAC,SAAN,CAAgB,aAAhB;IAEA,IAAG,OAAO,IAAC,QAAO,CAAC,IAAK,GAArB,KAA4B,QAA/B;MACE,KAAK,CAAC,SAAN,CAAgB,IAAC,QAAO,CAAC,IAAK,GAA9B,EADF;;AAGA,WAAO;EAjBU;;mBAmBnB,gBAAe,SAAC,KAAD;AACb,WAAO;aAAA,SAAC,OAAD,EAAU,OAAV;AACL,eAAU,KAAD,GAAO,IAAP,GAAW,OAAX,GAAmB,KAAnB,GAAwB,KAAC,WAAU,CAAC,OAAO,CAAC,QAA5C,GAAqD;MADzD;IAAA;EADM;;mBAIf,oBAAmB;AACjB,WAAO,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,GAAG,CAAC,IAAtB,EAA4B,kBAA5B;EADU;;mBAGnB,iBAAgB,SAAC,GAAD,EAAM,GAAN,EAAW,QAAX;AACd;IAAA,IAAC,MAAD,CAAO,wBAAsB,GAAtB,GAA0B,SAA1B,GAAmC,GAA1C;IACA,KAAK,IAAC,kBAAD;IACL,IAAG,EAAE,CAAC,UAAH,CAAc,EAAd,CAAH;MACE,SAAS,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,YAAH,CAAgB,EAAhB,CAAX,EADX;KAAA;MAGE,SAAS,GAHX;;IAKA,MAAO,KAAP,GAAc;WACd,EAAE,CAAC,SAAH,CAAa,EAAb,EAAiB,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAjB,EAAkD;aAAA;QAChD,KAAC,MAAD,CAAO,mBAAiB,EAAxB;eACA;MAFgD;IAAA,QAAlD;EATc;;mBAahB,iBAAgB,SAAC,QAAD;AACd;IAAA,KAAK,IAAC,kBAAD;IACL,IAAC,MAAD,CAAO,yBAAuB,EAAvB,GAA0B,KAAjC;IACA,IAAG,CAAC,EAAE,CAAC,UAAH,CAAc,EAAd,CAAJ;MACE,IAAC,UAAD,CAAW,iBAAe,EAAf,GAAkB,2DAA7B,EADF;;IAGA,SAAS,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,YAAH,CAAgB,EAAhB,CAAX;IACT,IAAC,WAAD,GAAc,aAAa,MAAb,EAAqB,IAAC,WAAtB;IACd,IAAC,MAAD,CAAO,oBAAiB,CAAC,IAAI,CAAC,SAAL,CAAe,IAAC,WAAhB,EAA4B,IAA5B,EAAkC,CAAlC,CAAD,CAAxB;WAEA;EAVc;;mBAYhB,WAAU,SAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA8B,IAA9B;AACR;;MAD0B,WAAS;;;MAAG,OAAK;;IAC3C,OAAO,UAAU;IACjB,OAAW,WAAO,CAAC,OAAK,CAAC,SAAO,GAAR,CAAN,IAAsB,QAA7B,CAAsC,CAAC,OAAvC,CAA+C,CAA/C;IACX,IAAG,SAAQ,OAAX;MACE,OAAW,WAAO,CAAC,IAAR,CAAa,CAAC,OAAd,CAAsB,CAAtB,EADb;;IAEA,IAAG,OAAK,CAAR;MAAe,OAAO,MAAI,KAA1B;;AACA,WAAO,OAAK;EANJ;;;;;;AASZ,MAAM,CAAC,OAAP,GACE;EAAA,SAAS,MAAM,CAAC,OAAhB;EACA,KAAK;AAAG,WAAO,IAAI;EAAd,CADL","file":"dist/cli.js","sourcesContent":["program = require 'commander'\nfs = require 'fs'\nPath = require 'path'\ndefaultsDeep = require 'lodash.defaultsdeep'\n#yaml = require 'js-yaml'\n\nclass BUXCli\n\n  commands:\n    login:\n      desc: 'Login to BUX account and create config'\n    find:\n      title: 'find [<pattern>]'\n      aliases: [ 'f' ]\n      desc: 'Products list'\n      options: [\n        [ '-f, --favorite', 'Show favorite products' ]\n        [ '-o, --only-open', 'Show open products' ]\n        [ '--category [cat]', 'Filter by category' ]\n        [ '--status [OPEN|CLOSED]', 'Filter by market status' ]\n        [ '-s, --sort [column]', 'Sort table' ]\n        [ '-c, --columns [columns]', 'Select columns to show' ]\n        [ '-l, --list-columns', 'List available columns for sort or view' ]\n      ]\n\n    product:\n      title: 'product <product-id>'\n      desc: 'Info about specified product'\n      aliases: [ 'pro' ]\n    positions:\n      title: 'positions [<pattern>]'\n      desc: 'Portfolio overview'\n      aliases: [ 'p' ]\n      options: [\n        [ '-s, --sort [column]', 'Sort table' ]\n        [ '-c, --columns [columns]', 'Select columns to show' ]\n        [ '-l, --list-columns', 'List available columns for sort or view' ]\n        [ '-w, --watch', 'Refresh in specified interval' ]\n        [ '-i, --interval [s]', 'Watch interval' ]\n      ]\n    position:\n      title: 'position <position-id>'  \n      desc: 'Info about specified position'\n      aliases: [ 'pos' ]\n    open:\n      title: 'open <product-id> <direction> <trade-size> <leverage>'\n      desc: 'Open position'\n      aliases: [ 'o' ]\n    close:\n      title: 'close [<position-id>]'\n      aliases: [ 'c' ]\n      desc: 'Close position'\n    fees:\n      title: 'fees'\n      desc: 'Fees'\n    autoclose:\n      title: 'autoclose <position-id>'\n      aliases: [ 'ac' ]\n      desc: 'Set autoclose values to position'\n    balance:\n      title: 'balance'\n      desc: 'Account balance'\n      aliases: [ 'b' ]\n    history:\n      title: 'history [<pattern>]'\n      desc: 'Trade history'\n      aliases: [ 'h' ]\n      options: [\n        [ '-s, --sort [column]', 'Sort table' ]\n      ]\n    me:\n      title: 'me'\n      desc: 'Info about you'\n    profile:\n      desc: 'Basic account info'\n      aliases: [ 'pr' ]\n    friends:\n      title: 'friends [<pattern>]'\n      aliases: [ 'fr' ]\n      desc: 'List your friends'\n      options: [\n        [ '-s, --sort [column]', 'Sort table' ]\n        [ '-c, --columns [columns]', 'Select columns to show' ]\n        [ '-l, --list-columns', 'List available columns for sort or view' ]\n      ]\n\n  config: {}\n  cmdProgram: null\n  loadedModules: {}\n\n  userConfig:\n    aliases:\n      directions:\n        BUY: '+, up, buy'\n        SELL: '-, down, sell'\n    positions:\n      columns: 'short_id, product, product_ident, type, amount, leverage, trade_price, price, change, profit, age'\n      sort: '!change'\n    friends:\n      columns: 'short_id, nickname, country, type, title, since'\n      sort: 'nickname'\n    find:\n      columns: 'id, name, product_ident, category, max_leverage, status, price, change, favorite'\n      sort: 'id'\n    history:\n      columns: 'short_id, type, product, product_ident, amount, leverage, price, profit, status, order_type, age'\n      sort: '!created'\n\n  constructor: ->\n    @version = JSON.parse(fs.readFileSync(Path.resolve(__dirname, '..', 'package.json'))).version\n    @loadProgram (cmd) =>\n      @run(cmd)\n\n  modules: (arr, callback) ->\n    output = []\n    for mi in arr\n      if @loadedModules[mi]\n        mod = @loadedModules[mi]\n      else\n        mod = require(mi)\n        @loadedModules[mi] = mod\n      output.push mod\n    callback.apply(null, output)\n\n  getVersion: ->\n    @modules [ 'libbux' ], (BUX) =>\n      return \"#{@version} (libbux #{BUX.version})\"\n\n  run: (cmd) ->\n    @debug \"Running command: #{cmd}\"\n\n    @modules [ 'libbux' ], (BUX) =>\n      buxConfig =\n        server: @program.server || @userConfig.server\n        access_token: @userConfig.account?.access_token\n        no_symbols: true\n\n      @userConfig.symbols = defaultsDeep BUX.symbols, @userConfig.symbols\n\n      BUX.api buxConfig, (@bux) =>\n        @['cmd_'+cmd] (err, output) =>\n          if err\n            @exception(err)\n          if !output\n            @exception('endpoint not found')\n          else if typeof(output) == 'string'\n            console.log output\n          else\n            if @program.json\n              console.log JSON.stringify(output.json)\n            else if output.text\n              console.log output.text\n          @debug 'Done.'\n\n  exception: (err) ->\n    console.log \"Error: #{err}\"\n    process.exit 10\n\n  loadProgram: (callback) ->\n    @program = program\n      .usage '[options] <command>'\n      .version @getVersion()\n      .option '-d, --debug', 'print verbose debug output to stdout'\n      .option '-j, --json', 'output in json'\n      .option '--server <address>', 'server api address'\n\n    aliases = {}\n\n    cmd = null\n    cmdProgram = null\n    for cmdKey, cmdData of @commands\n      title = cmdKey\n      if cmdData.title\n        title = cmdData.title\n      pc = @program.command title\n        .description cmdData.desc\n\n      if cmdData.aliases\n        for alias in cmdData.aliases\n          aliases[alias] = cmdKey\n        cmdData.aliases.map (opt) -> pc = pc.alias(opt)\n\n      if cmdData.options\n        cmdData.options.map (opt) -> pc = pc.option(opt[0], opt[1])\n\n      pc = pc.action () ->\n        program = arguments[Object.keys(arguments).length-1]\n        cmd = program._name\n        cmdProgram = program\n        outArgs = []\n        for arg in arguments\n          if typeof(arg) != 'object'\n            outArgs.push arg\n\n        cmdProgram.parsedArgs = outArgs\n\n    # ensure aliases\n    args = process.argv.slice()\n    if aliases[args[2]]\n      args[2] = aliases[args[2]]\n\n    @program.parse args\n    @cmdProgram = cmdProgram\n\n    if @program.debug\n      process.env.DEBUG = 'bux:*,libbux:*,superagent:*'\n      @debug = require('debug')('bux:main')\n      @debug 'Debug mode enabled.'\n    else\n      @debug = -> return null\n\n    if cmd == null\n      @program.outputHelp()\n      process.exit 0\n    else if !@['cmd_'+cmd]\n      @exception \"Command not exists: #{cmd}\"\n    else if cmd == 'login'\n      callback(cmd)\n    else\n      @loadUserConfig =>\n        callback(cmd)\n\n  getPrompt: (schema, callback) ->\n    prompt = require 'prompt'\n    prompt.message = ''\n    prompt.delimited = ''\n    prompt.start()\n\n    prompt.get schema, (err, result) ->\n      prompt.stop()\n      callback err, result\n\n  cmd_open: (callback) ->\n    args = @cmdProgram.parsedArgs\n    query = \n      product: @resolveProductId args[0]\n      direction: @resolveDirection args[1]\n      size: args[2]\n      multiplier: args[3]\n\n    if !query.direction\n      return callback \"bad direction: #{args[1]}\"\n    if (new Number(query.size) <= 0)\n      return callback \"bad size: #{query.size}\"\n    if (new Number(query.multiplier) <= 0)\n      return callback \"bad multiplier: #{query.multiplier}\"\n\n    @bux.open query, (err, output) =>\n      if err then return @exception err\n\n      productId = @getSymbol(output.product.securityId) || output.product.securityId\n      created = new Date(new Number(output.dateCreated)).toString()\n\n      text = \"Position successfully opened!\\n\" +\n        \"  Trade Id: #{output.id}\\n\" +\n        \"  Type: #{output.type}\\n\" +\n        \"  Position Id: #{output.positionId}\\n\" +\n        \"  Product: #{output.product.displayName} [#{productId}]\\n\" +\n        \"  Direction: #{output.direction}\\n\" +\n        \"  Trade size: #{output.investingAmount.amount}\\n\" +\n        \"  Multiplier: #{output.leverage}\\n\" +\n        \"  Current price: #{output.price.amount}\\n\" +\n        \"  Time: #{created}\"\n\n        callback null, { text: text, json: output }\n\n  cmd_close: (callback) ->\n    args = @cmdProgram.parsedArgs\n    positionId = args[0]\n    if !positionId then return callback 'no position id'\n\n    @bux.close positionId, (err, output) =>\n      if err then return callback err\n\n      productId = @getSymbol(output.product.securityId) || output.product.securityId\n      created = new Date(new Number(output.dateCreated)).toString()\n\n      text = \"Position closed!\\n\" +\n        \"  Trade Id: #{output.id}\\n\" +\n        \"  Type: #{output.type}\\n\" +\n        \"  Position Id: #{output.positionId}\\n\" +\n        \"  Product: #{output.product.displayName} [#{productId}]\\n\" +\n        \"  Direction: #{output.direction}\\n\" +\n        \"  Trade size: #{output.investingAmount.amount}\\n\" +\n        \"  Multiplier: #{output.leverage}\\n\" +\n        \"  Close price: #{output.price.amount}\\n\" +\n        \"  Profit: #{output.profitAndLoss.amount} #{output.profitAndLoss.currency}\\n\" +\n        \"  Time: #{created}\"\n\n      callback null, { text: text, json: output }\n\n  cmd_me: (callback) ->\n    @bux.me (err, data) =>\n      if err then return @exception err\n      callback null, { text: JSON.stringify(data, null, 2), json: data }\n\n  cmd_help: (callback) ->\n    program.outputHelp()\n    callback null, null\n\n  cmd_login: (callback) ->\n    console.log \"Welcome to BUX terminal interface!\"\n    console.log 'Please specify your account details'\n\n    schema =\n      properties:\n        email: { description: 'Email' }\n        password: { description: 'Password', hidden: true }\n\n    @getPrompt schema, (err, account) =>\n      @debug \"Logging to BUX [email=#{account.email}] ..\"\n      @bux.login account, (err, data) =>\n        if err or !data.access_token\n          return @exception 'Login error'\n\n        @debug \"Login done. Saving ..\"\n        @saveUserConfig 'account', { access_token: data.access_token }, () ->\n          callback null, { text: 'Login done! Welcome abroad.', json: data }\n\n  cmd_history: (callback) ->\n\n    columns =\n      id:\n        name: 'Id'\n        key: 'id'\n      short_id:\n        name: 'Trade Id'\n        render: (x) -> return x.id.substring 0, 8\n      category:\n        name: 'Category'\n        key: 'product.category'\n      product:\n        name: 'Product'\n        key: 'product.displayName'\n      product_id:\n        name: 'Product Id'\n        key: 'product.securityId'\n      product_ident:\n        name: 'Product Id'\n        render: (x) => return @resolveProductSymbol(x.product.securityId)\n      type:\n        name: 'Type'\n        key: 'direction'\n      status:\n        name: 'Status'\n        key: 'type'\n      leverage:\n        name: '× M'\n        key: 'leverage'\n      price:\n        name: 'Trade price'\n        key: 'price.amount'\n        align: 'RIGHT'\n      amount:\n        name: 'Amount'\n        key: 'investingAmount.amount'\n        align: 'RIGHT'\n      change:\n        name: 'Change'\n        align: 'RIGHT'\n        sortRank: (x) -> x.rendered.change.replace(/[\\+]+/,'')\n        render: (x) =>\n          return ''\n          #return @calcDiff(x.currentPrice.amount, x.tradePrice.amount, x.leverage, x.type)\n      created:\n        name: 'Created'\n        key: 'dateCreated'\n      age:\n        name: 'Age'\n        sortRank: (x) -> x.pos.dateCreated\n        render: (x) -> return require('moment')(x.dateCreated).fromNow(true).toString()\n      profit:\n        name: 'Profit'\n        align: 'RIGHT'\n        render: (x) -> return (x.profitAndLoss?.amount || '')\n      order_type:\n        name: 'Status type'\n        key: 'orderType'\n\n    table = @createTable columns, 'History', 'product'\n\n    if @cmdProgram.listColumns\n      data = table.listColumns()\n      return callback null, { text: data.table.toString(), json: data.columns }\n\n    if typeof(@program.args[0]) == \"string\"\n      table.setSearch @program.args[0]\n\n    table.setLayout @cmdProgram.columns || @userConfig.history.columns\n    table.setSort @cmdProgram.sort || @userConfig.history.sort\n\n    finishView = (table, data) =>\n      table.titleFn = @createTitleFn(\"History\")\n      return table.render(data)\n\n    @bux.trades (err, x) =>\n      if err then return @exception(err)\n      text = finishView(table, x)\n      callback null, { text: text, json: x }\n\n  cmd_positions: (callback) ->\n\n    columns =\n      id:\n        name: 'Id'\n        key: 'id'\n      short_id:\n        name: 'Trade Id'\n        render: (x) -> return x.id.substring 0, 8\n      category:\n        name: 'Category'\n        key: 'product.category'\n      product:\n        name: 'Product'\n        key: 'product.displayName'\n      product_id:\n        name: 'Product Id'\n        key: 'product.securityId'\n      product_ident:\n        name: 'Product Id'\n        render: (x) => return @resolveProductSymbol(x.product.securityId)\n      leverage:\n        name: '× M'\n        key: 'leverage'\n      type:\n        name: 'Type'\n        key: 'type'\n      trade_price:\n        name: 'Trade price'\n        key: 'tradePrice.amount'\n        align: 'RIGHT'\n      price:\n        name: 'Price'\n        key: 'currentPrice.amount'\n        align: 'RIGHT'\n      profit:\n        name: 'Profit'\n        align: 'RIGHT'\n        render: (x) -> return (x.profitAndLoss?.amount || '')\n      amount:\n        name: 'Amount'\n        key: 'investedAmount.amount'\n        align: 'RIGHT'\n      opened:\n        name: 'Opened'\n        key: 'openingsDate'\n      age:\n        name: 'Age'\n        sortRank: (x) -> x.pos.openingsDate\n        render: (x) ->\n          return require('moment')(x.openingsDate).fromNow(true).toString()\n      change:\n        name: 'Change'\n        align: 'RIGHT'\n        sortRank: (x) -> x.rendered.change.replace(/[\\+]+/,'')\n        render: (x) =>\n          return @calcDiff(x.currentPrice.amount, x.tradePrice.amount, x.leverage, x.type)\n\n    table = @createTable columns, 'positions', 'product'\n\n    if @cmdProgram.listColumns\n      data = table.listColumns()\n      return callback null, { text: data.table.toString(), json: data.columns }\n\n    if typeof(@program.args[0]) == \"string\"\n      table.setSearch @program.args[0]\n\n    table.setLayout @cmdProgram.columns || @userConfig.positions.columns\n    table.setSort @cmdProgram.sort || @userConfig.positions.sort\n\n    finishView = (table, data) =>\n      table.titleFn = @createTitleFn(\"Positions\")\n      return table.render(data)\n\n    if @cmdProgram.watch\n      interval = @cmdProgram.interval\n      if !interval\n        interval = 10\n\n      term = require( 'terminal-kit' ).terminal\n      term.fullscreen({ noAlternate: true })\n      #term.hideCursor()\n\n      renderView = () =>\n        @bux.portfolio (err, x) =>\n          if err then return @exception(err)\n          term.clear()\n          term finishView(table, x.positions)\n          term \"\\nLast updated: #{ new Date }\"\n\n      renderView()\n      setInterval renderView, interval * 1000\n    \n    else\n      @bux.portfolio (err, x) =>\n        if err then return @exception(err)\n        text = finishView(table, x.positions)\n        callback null, { text: text, json: x.positions }\n\n  getSymbol: (productId, showAll=false) ->\n    if @userConfig.symbols[productId]\n      str = '@'+@userConfig.symbols[productId]\n      if !showAll \n        return str.split('/')[0]\n      return str\n    return null\n\n  resolveDirection: (dir) ->\n    if @userConfig.aliases.directions?\n      for dk, da of @userConfig.aliases.directions\n        for d in da.split(',').map((x) -> x.trim())\n          if d == dir then dir = dk\n          continue\n\n    if dir not in [ 'SELL', 'BUY' ] then return false\n    return dir\n\n  resolveProductSymbol: (id) ->\n    symbol = @bux.findSymbolByProduct(id)\n    if !symbol then return id\n    return \"@#{symbol}\"\n    \n  resolveProductId: (id) ->\n    symbol = @bux.findProductBySymbol id, @userConfig.symbols\n    return symbol || id\n\n  cmd_position: (callback) ->\n    positionId = @cmdProgram.parsedArgs[0]\n\n    @debug \"Getting position: #{positionId}\"\n    @bux.position positionId, (err, pos) =>\n      callback err, { text: JSON.stringify(pos, null, 2), json: pos }\n\n  cmd_fees: (callback) ->\n    @bux.fees (err, fees) =>\n      callback null, { text: JSON.stringify(fees, null, 2), json: fees }\n\n  cmd_product: (callback) ->\n    productId = @resolveProductId @cmdProgram.parsedArgs[0]\n    @debug \"Getting product: #{productId}\"\n\n    params =\n      securityId:\n        name: 'Id'\n      displayName:\n        name: 'Name'\n      favorite:\n        name: 'Favorite'\n      category:\n        name: 'Category'\n      maxLeverage:\n        name: 'Max multiplier'\n      description:\n        name: 'Description'\n\n    table = @createTableSimple params, \"Product\", 'key'\n\n    @bux.product productId, (err, product) =>\n      if err then return @exception(err)\n      if !product then return @exception \"Product not found: #{productId}\"\n\n      matrix = table.processSimpleData(product, params)\n      callback null, { text: table.render(matrix), json: product }\n\n  cmd_profile: (callback) ->\n    params =\n      id:\n        name: 'Id'\n      nickname:\n        name: 'Nickname'\n      avatarUrl:\n        name: 'Avatar URL'\n      countryCode:\n        name: 'Country'\n      title:\n        name: 'Title'\n      tradingStats:\n        name: 'Trading Stats'\n      accountType:\n        name: 'Account Type'\n      level:\n        name: 'Level'\n\n    table = @createTableSimple params, \"Profile [#{@userConfig.account.username}]\", 'key'\n\n    @bux.profile (err, x) =>\n      if err then return @exception(err)\n\n      matrix = table.processSimpleData(x, params)\n      callback null, { text: table.render(matrix), json: x }\n\n  cmd_find: (callback) ->\n\n    columns =\n      id:\n        key: 'securityId'\n        name: 'Id'\n      name:\n        name: 'Name'\n        key: 'displayName'\n      max_leverage:\n        name: 'Max ×'\n        key: 'maxLeverage'\n      category:\n        name: 'Category'\n        key: 'category'\n      favorite:\n        name: 'Favorite'\n        key: 'favorite'\n      status:\n        name: 'Status'\n        key: 'productMarketStatus'\n      price:\n        name: 'Price'\n        key: 'currentPrice.amount'\n      change:\n        name: 'Change'\n        align: 'RIGHT'\n        sortRank: (x) -> x.rendered.change.replace(/[\\+]+/,'')\n        render: (x) =>\n          return @calcDiff(x.closingPrice.amount, x.currentPrice.amount, 1)\n      product_ident:\n        name: 'Product Id'\n        render: (x) => return @resolveProductSymbol(x.securityId)\n      symbol:\n        name: 'Symbol'\n        render: (x) => return @getSymbol(x.securityId)\n      symbols:\n        name: 'Symbols'\n        render: (x) => return @getSymbol(x.securityId, true)\n          \n    table = @createTable columns, null, 'name'\n\n    if @cmdProgram.listColumns\n      data = table.listColumns()\n      return callback null, { text: data.table.toString(), json: data.columns }\n\n    @bux.products (err, x) =>\n      if err then return @exception(err)\n\n      if typeof(@program.args[0]) == \"string\"\n        table.setSearch @program.args[0]\n\n      table.filterFn = (item) =>\n        status = true\n        if @cmdProgram.favorite\n          status = (if item.favorite then true else false)\n        if status and @cmdProgram.status\n          status = (item.productMarketStatus == @cmdProgram.status)\n        else if status and @cmdProgram.onlyOpen\n          status = (item.productMarketStatus == 'OPEN')\n        return status\n\n      table.titleFn = @createTitleFn(\"Products\")\n      table.setLayout @cmdProgram.columns || @userConfig.find.columns\n      table.setSort @cmdProgram.sort || @userConfig.find.sort\n\n      callback null, { text: table.render(x), json: x }\n\n  cmd_friends: (callback) ->\n\n    columns =\n      id:\n        key: 'id'\n        name: 'Id'\n      short_id:\n        name: 'Id'\n        render: (x) -> return x.id.substring 0, 8\n      nickname:\n        key: 'nickname'        \n        name: 'Nickname'\n      title:\n        key: 'title'\n        name: 'Title'\n      country:\n        key: 'countryCode'\n        name: 'Country'\n      type:\n        key: 'accountType'\n        name: 'Account type'\n      since:\n        name: 'Friend since'\n        render: (x) ->\n          return require('moment')(x.friendSince).fromNow(true).toString()\n      since_time:\n        name: 'Friend since (date)'\n        key: 'friendSince'\n\n    table = @createTable columns, null, 'nickname'\n\n    if @cmdProgram.listColumns\n      data = table.listColumns()\n      return callback null, { text: data.table.toString(), json: data.columns }\n\n    @bux.friends (err, x) =>\n      if err then return @exception(err)\n\n      if typeof(@program.args[0]) == \"string\"\n        table.setSearch @program.args[0]\n\n      table.titleFn = @createTitleFn(\"Friends\")\n      table.setLayout @cmdProgram.columns || @userConfig.friends.columns\n      table.setSort @cmdProgram.sort || @userConfig.friends.sort\n\n      callback null, { text: table.render(x), json: x }\n\n  verifyProduct: (productId) ->\n\n  createTable: (columns, name, defaultColumn) ->\n    Table = require './table'\n    table = new Table(columns, defaultColumn, name)\n    return table\n\n  createTableSimple: (params, name, defaultColumn) ->\n    columns =\n      param:\n        key: 'key'\n        name: 'Key'\n        align: 'RIGHT'\n      value:\n        key: 'value'        \n        name: 'Value'\n\n    table = @createTable columns, name, defaultColumn\n    table.showHeader = false\n    table.setLayout 'param,value'\n\n    if typeof(@program.args[0]) == \"string\"\n      table.setSearch @program.args[0]\n\n    return table\n\n  createTitleFn: (title) ->\n    return (counter, product) =>\n      return \"#{title} (#{counter}) [#{@userConfig.account.username}]\"\n\n  getConfigFilename: () ->\n    return Path.join(process.env.HOME, '.bux-config.json')\n\n  saveUserConfig: (key, val, callback) ->\n    @debug \"Saving config: key=#{key} value=#{val}\"\n    fn = @getConfigFilename()\n    if fs.existsSync fn\n      output = JSON.parse(fs.readFileSync(fn))\n    else\n      output = {}\n\n    output[key] = val\n    fs.writeFile fn, JSON.stringify(output, null, 2), =>\n      @debug \"Config saved: #{fn}\"\n      callback()\n\n  loadUserConfig: (callback) ->\n    fn = @getConfigFilename()\n    @debug \"Loading config from #{fn} ..\"\n    if !fs.existsSync fn\n      @exception \"Config file #{fn} not exists.\\nPlease use `bux login` to create a new one.\"\n\n    config = JSON.parse fs.readFileSync(fn)\n    @userConfig = defaultsDeep config, @userConfig\n    @debug \"Config loaded: #{JSON.stringify(@userConfig, null, 2)}\"\n\n    callback()\n\n  calcDiff: (current, traded, leverage=1, type=\"SHORT\") ->\n    diff = current - traded\n    numb = new Number((diff/(traded/100)) * leverage).toFixed(2)\n    if type == 'SHORT'\n      numb = new Number(-numb).toFixed(2)\n    if numb>0 then numb = \"+\"+numb\n    return numb+'%'\n\n\nmodule.exports =\n  version: BUXCli.version\n  run: -> return new BUXCli\n\n"]}